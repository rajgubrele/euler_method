# -*- coding: utf-8 -*-
"""Eulerexplicit

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QZn1WIh22X-9KoorHVWlML6UJdL7vkZG
"""

##############################################################################################################
# Euler's method for solving ordinary differential equation #
##############################################################################################################
# The module contains the definition of the function: Euler (for solving the ODE)
# 1. Arguments of Euler:
      # function   : Function for which the integral needs to be calculated
      # x0 : Initial value of x
      # y0 : Initial value of y
      # h  : Stepsize used for estimation
      # xn : The value of x at which the solution is to be found
      # hvar: If hvar = 1, The differential equation is estimated for different step sizes (h/100,h/10,h,10*h)
      # printItr : If printItr = 1, The iterations for estimating the solution is printed
      # printPlot : If printPlot = 1, Plot of the values of y with respect to x.
# 2. Method to evaluate the differential equation:
      # Number of iteration is calculated using n = ((xn - x0)/h + 1)
# 3. Default Output(hvar = 0, printItr = 0, printPlot = 0):
      # The solution of the differential equation at the point xn
# 4. Conditional outputs(hvar = 1, printItr = 1, printPlot = 1):
      # The values of x0 and y0 in the loop are appended in the variables a and b
      # z in converted into an array w and this is used to generate the plot of f.
      # If printPlot = 1, Matplotlib.pyplot is used to generate the plot y vs x
      # If hvar = 1, Solution is found for different stepsizes (h).
# 5. Some important points:
      # Modules Matplotlib.pyplot, numpy are already imported as plt, np
##############################################################################################################
##############################################################################################################
# Steps to use the module for solving the differential equation #
##############################################################################################################
  # 1. Import the module Eulerexplicit.py
  # 2. Define differential equation to be solved as the function
  # 3. Input the values of x0, y0, h, xn, printPlot , printItr, hvar
  # 4. For default output: Input hvar = 0, printItr = 0, printPlot = 0
  # 5. For conditional outputs: 
  # 6. Input hvar = 1 for solutions for different stepsizes (h)
  # 7. Input printItr = 1 for showing intermediate iterations to reach the final solution
  # 8. Input printPlot = 1 to get the plot of y with respect to  values of x 
##############################################################################################################
##############################################################################################################
# A sample example for using the module #
##############################################################################################################
# import Eulerexplicit
# def function(x,y):
#  if y > 4000:
#    return (42*x*np.exp(-0.273*x)) + 10*np.cos(2*np.pi*x) - 0.16*(y - 4000)**2
#  else:
#    return (42*x*np.exp(-0.273*x)) + 10*np.cos(2*np.pi*x)
#  x0 = 0
#  y0 = 3900
#  h = 0.1
#  xn = 10
#  printPlot = 0 
#  printItr = 0
# hvar = 0
#  Euler(x0,y0,h,xn,printPlot,printItr)
##############################################################################################################
import numpy as np
import matplotlib.pyplot as plt


x = open('Euler_out.txt','a')
def Euler(function,x0,y0,h,xn,printPlot,printItr,hvar):
  def Eu(x0,y0,h,xn,printPlot,printItr):
    try:
      a = []
      b = []
      n = int((xn - x0)/h + 1)
      if printItr == 1:
        print(' n  \t x0  \t  y0    \t  dy/dx  \t yn ')
      for i in range(1,n):
          yn = y0 + h*function(x0,y0)
          x0 = x0 + h
          if x0<xn:
              y0 = yn
          else:
              pass
          a.append(x0)
          b.append(y0)
          if printItr == 1:
            print('{:2.2f} {:7.2f} {:10.2f} {:14.2f} {:16.2f}'.format(i,x0,y0,function(x0,y0),yn))
          else:
            pass
      if printPlot == 1:
        plt.plot(a,b)
        plt.xlabel('Value of x') 
        plt.ylabel('Value of y')
        plt.title('Approximate Solution with Eulerâ€™s Method')
        plt.show()
      else:
        pass 
      return yn
    except ZeroDivisionError:
      print('Stepsize can not be zero')
    except:
      print('Something went wrong')
  if hvar == 1:
    print('Stepsize \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t yn')
    for i in range(4):
      print(10*h,'\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t',Eu(x0,y0,10*h,xn,printPlot,printItr))
      h = h/10 
  else:
    return print('The solution of the given differential equation is ', Eu(x0,y0,10*h,xn,printPlot,printItr))
x.close()
# To compare the estimated values with solution found using inbuilt function
from scipy.integrate import solve_ivp
import numpy as np
def Inbuilt(function,xn,y0):
  out = open('Inbuilt function output','a')
  sol = solve_ivp(function, [0, xn], [y0])
  print('Solution by inbuilt function : ',sol.y[0][22], file = out)
  out.close()